# syntax=docker/dockerfile:1
# Test build - Alpine-friendly with testing tools
FROM python:3.11-alpine

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    IN_DOCKER="1" \
    TESTING="true" \
    DOCKER_MODE="test" \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    TZ=Asia/Singapore \
    MAKEFLAGS="-j$(nproc)" \
    PYTHONHASHSEED=random \
    PIP_USE_PEP517=1 \
    PIP_PREFER_BINARY=1

# Build arguments
ARG PARALLEL_JOBS=4
ARG VENV_PATH=/home/appuser/.nypai-chatbot/venv-test

# Set environment variables from build args
ENV PIP_JOBS=${PARALLEL_JOBS} \
    VENV_PATH=${VENV_PATH}

WORKDIR /app

# Install system dependencies for testing
RUN apk add --no-cache \
    build-base \
    libffi-dev \
    openssl-dev \
    zlib-dev \
    jpeg-dev \
    freetype-dev \
    libpng-dev \
    libgomp \
    libstdc++ \
    libgcc \
    pandoc-cli \
    poppler-utils \
    tesseract-ocr \
    curl \
    tzdata \
    ca-certificates \
    git \
    imagemagick \
    vim \
    nano \
    netcat-openbsd \
    gzip \
    bzip2 \
    xz \
    procps \
    sysstat \
    fontconfig \
    libx11 \
    libxrender \
    libxext \
    libssl3 \
    freetype \
    && update-ca-certificates \
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \
    && echo $TZ > /etc/timezone

# Create user and directories
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup -s /bin/sh && \
    mkdir -p /home/appuser/.nypai-chatbot/data/{cache,vector_store/chroma_db,memory_persistence,nltk_data,chat_sessions,user_info,uploads,test_uploads,logs} && \
    mkdir -p /app/data && \
    mkdir -p /app/docs/modules /app/docs/modules/src && \
    chown -R appuser:appgroup /app && \
    chown -R appuser:appgroup /home/appuser/.nypai-chatbot && \
    chmod -R 755 /home/appuser/.nypai-chatbot && \
    chmod -R 755 /app

# Switch to non-root user
USER appuser

# Create virtual environment
RUN python3 -m venv ${VENV_PATH}
ENV PATH="${VENV_PATH}/bin:$PATH" \
    PYTHONPATH=/app

# Copy requirements first for better caching
COPY --chown=appuser:appgroup requirements/requirements-test.txt .

# Install Python dependencies
RUN ${VENV_PATH}/bin/pip install --upgrade pip wheel setuptools && \
    ${VENV_PATH}/bin/pip install -r requirements-test.txt

# Copy application code
COPY --chown=appuser:appgroup src/ ./src/
COPY --chown=appuser:appgroup styles/ ./styles/
COPY --chown=appuser:appgroup src/scripts/entrypoint.py ./
COPY --chown=appuser:appgroup src/tests/ ./tests/

# Copy Docker build tracking files (if they exist)
COPY --chown=appuser:appgroup docker/copy_build_data.sh ./
RUN chmod +x ./copy_build_data.sh && ./copy_build_data.sh

# Set entrypoint and command for testing
ENTRYPOINT ["/home/appuser/.nypai-chatbot/venv-test/bin/python", "/app/entrypoint.py"]
CMD ["python", "-m", "pytest", "src/tests/"]

# Print build information
RUN echo "[BUILD] Using ENTRYPOINT: ${VENV_PATH}/bin/python /app/entrypoint.py" && \
    echo "[BUILD] Python executable: ${VENV_PATH}/bin/python" && \
    echo "[BUILD] Python version: $(${VENV_PATH}/bin/python --version)" && \
    echo "[BUILD] Pip version: $(${VENV_PATH}/bin/pip --version)"
