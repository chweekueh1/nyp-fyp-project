# syntax=docker/dockerfile:1
FROM python:3.11-alpine

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    IN_DOCKER="1" \
    DOCUMENTATION="true" \
    DOCKER_MODE="docs" \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    TZ=Asia/Singapore \
    MAKEFLAGS="-j$(nproc)" \
    PYTHONHASHSEED=random \
    PIP_USE_PEP517=1 \
    PIP_PREFER_BINARY=1 \
    PIP_ONLY_BINARY=:all:

# Build arguments
ARG PARALLEL_JOBS=4
ARG VENV_PATH=/home/appuser/.nypai-chatbot/venv-docs

# Set environment variables from build args
ENV PIP_JOBS=${PARALLEL_JOBS} \
    VENV_PATH=${VENV_PATH}

WORKDIR /app

# Install system dependencies in a single layer
RUN apk add --no-cache \
    build-base \
    libffi-dev \
    openssl-dev \
    zlib-dev \
    curl \
    tzdata \
    ca-certificates \
    git \
    make \
    graphviz \
    && update-ca-certificates \
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \
    && echo $TZ > /etc/timezone

# Create user and directories
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup -s /bin/sh && \
    mkdir -p /home/appuser/.nypai-chatbot/data/{cache,docs} && \
    mkdir -p /app/data && \
    mkdir -p /app/docs && \
    mkdir -p /app/docs/modules /app/docs/modules/src && \
    chown -R appuser:appgroup /app && \
    chown -R appuser:appgroup /home/appuser/.nypai-chatbot && \
    chmod -R 755 /home/appuser/.nypai-chatbot && \
    chmod -R 755 /app

# Switch to non-root user
USER appuser

# Create virtual environment
RUN python3 -m venv ${VENV_PATH}
ENV PATH="${VENV_PATH}/bin:$PATH" \
    PYTHONPATH=/app:/app/docs

# Copy documentation requirements first for better layer caching
COPY --chown=appuser:appgroup requirements/requirements-docs.txt ./

# Install Python dependencies for documentation
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    chmod +x $HOME/.local/bin/uv && \
    export PATH="$HOME/.local/bin:$PATH" && \
    ${VENV_PATH}/bin/pip install --upgrade pip wheel setuptools && \
    ${VENV_PATH}/bin/pip install uv && \
    export VIRTUAL_ENV=${VENV_PATH} && \
    uv pip install --upgrade pip wheel setuptools && \
    uv pip install --prerelease=allow -r requirements-docs.txt

# Install documentation dependencies in the venv
# (Remove this line, as doc dependencies are already installed)
# RUN /home/appuser/.nypai-chatbot/venv-docs/bin/pip install -r requirements-docs.txt

# Copy application code
COPY --chown=appuser:appgroup src/ ./src/
COPY --chown=appuser:appgroup styles/ ./styles/
COPY --chown=appuser:appgroup misc/ ./misc/
COPY --chown=appuser:appgroup src/scripts/ ./scripts/
COPY --chown=appuser:appgroup src/tests/ ./tests/

# Copy the documentation generation script
COPY --chown=appuser:appgroup src/scripts/generate_docs.py ./

# Create Sphinx configuration directories
RUN mkdir -p /app/docs/_templates /app/docs/_static

# Clean up any files in /app/docs/ before copying Sphinx config (after copying source code)
RUN rm -rf /app/docs/* && mkdir -p /app/docs/_templates /app/docs/_static

# Copy Sphinx configuration files
COPY --chown=appuser:appgroup src/docs/conf.py /app/docs/
COPY --chown=appuser:appgroup src/docs/Makefile /app/docs/
COPY --chown=appuser:appgroup src/docs/extensions/ /app/docs/extensions/

# Make the script executable
RUN chmod +x /app/generate_docs.py

# RST files will be generated when the container starts via serve_docs.sh
# This avoids duplicate generation during build and startup

# Expose port for HTTP server
EXPOSE 8080

# Copy scripts/serve_docs.sh into the image and set it as the CMD. Make sure it is executable. Remove any previous CMD that ran the docs build or HTTP server directly.
COPY --chown=appuser:appgroup src/scripts/serve_docs.sh ./
RUN chmod +x /app/serve_docs.sh

# Set the serve_docs.sh script as the entrypoint
ENTRYPOINT ["/bin/sh", "/app/serve_docs.sh"]

# Print build information
RUN echo "[BUILD] Documentation Docker image built successfully" && \
    echo "[BUILD] Python executable: ${VENV_PATH}/bin/python" && \
    echo "[BUILD] Python version: $(${VENV_PATH}/bin/python --version)" && \
    echo "[BUILD] Sphinx version: $(${VENV_PATH}/bin/sphinx-build --version)"
